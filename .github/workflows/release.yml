name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build_and_release:
    name: Build for ${{ matrix.platform_id }}
    permissions:
      contents: write

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2022
            python-version: '3.8'
            platform_id: 'win-amd64'

          - os: ubuntu-latest
            python-version: '3.10'
            platform_id: 'linux-x86_64'

          - os: macos-13
            python-version: '3.10'
            platform_id: 'macos-x86_64'

          - os: macos-latest
            python-version: '3.10'
            platform_id: 'macos-arm64'

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cx_Freeze
          pip install -r requirements.txt
        shell: bash

      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxkbcommon-x11-0

      - name: Get version from tag
        run: |
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
        shell: bash

      - name: Build executable with cx_Freeze
        run: |
          export CI_VERSION=${{ env.VERSION }}
          
          if [ "${{ runner.os }}" == "macOS" ]; then
            python setup.py bdist_mac
          else
            python setup.py build
          fi
        shell: bash

      - name: Prepare artifact for release
        shell: bash
        run: |
          ARTIFACT_DIR="KeyWeaver-${{ env.VERSION }}-${{ matrix.platform_id }}"
          mkdir -p ${ARTIFACT_DIR}

          if [ "${{ runner.os }}" == 'macOS' ]; then
            mv dist/KeyWeaver.app ./${ARTIFACT_DIR}/
          else
            BUILD_DIR=$(find build -maxdepth 1 -type d -name "exe.*")
            mv ${BUILD_DIR}/* ./${ARTIFACT_DIR}/
          fi
          
          echo "ARTIFACT_DIR=${ARTIFACT_DIR}" >> $GITHUB_ENV


      - name: Create release archive
        shell: bash
        run: |
          if [ "${{ runner.os }}" == 'Windows' ]; then
            7z a "${{ env.ARTIFACT_DIR }}.zip" "./${{ env.ARTIFACT_DIR }}"
            echo "ASSET_PATH=${{ env.ARTIFACT_DIR }}.zip" >> $GITHUB_ENV
          else
            tar -czvf "${{ env.ARTIFACT_DIR }}.tar.gz" "${{ env.ARTIFACT_DIR }}"
            echo "ASSET_PATH=${{ env.ARTIFACT_DIR }}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ASSET_PATH }}
          generate_release_notes: true